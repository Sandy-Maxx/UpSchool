# Multi-stage build for production Django backend
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        git \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --user --no-cache-dir --upgrade pip \
    && pip install --user --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PATH=/root/.local/bin:$PATH

# Create app user for security
RUN groupadd -r app && useradd -r -g app app

# Install runtime system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
        wait-for-it \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packages from builder
COPY --from=builder /root/.local /root/.local

# Set work directory
WORKDIR /app

# Copy project files
COPY . .

# Create necessary directories
RUN mkdir -p /app/staticfiles /app/media /app/logs \
    && chown -R app:app /app

# Collect static files
RUN python manage.py collectstatic --noinput

# Create entrypoint script
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Django application..."

# Wait for database
echo "Waiting for database..."
while ! python manage.py check --database default > /dev/null 2>&1; do
    echo "Database not ready, waiting..."
    sleep 2
done

echo "Database is ready!"

# Run migrations
echo "Running database migrations..."
python manage.py migrate --noinput

# Setup RBAC if needed
echo "Setting up RBAC..."
python manage.py setup_rbac

# Create logs directory
mkdir -p /app/logs

# Start application based on command
if [ "$1" = "web" ]; then
    echo "Starting Gunicorn..."
    exec gunicorn school_platform.wsgi:application \
        --bind 0.0.0.0:8000 \
        --workers 4 \
        --worker-class gevent \
        --worker-connections 1000 \
        --max-requests 1000 \
        --max-requests-jitter 100 \
        --timeout 30 \
        --keep-alive 2 \
        --log-level info \
        --access-logfile /app/logs/access.log \
        --error-logfile /app/logs/error.log \
        --capture-output
elif [ "$1" = "celery-worker" ]; then
    echo "Starting Celery worker..."
    exec celery -A school_platform worker \
        --loglevel=info \
        --concurrency=4 \
        --logfile=/app/logs/celery-worker.log
elif [ "$1" = "celery-beat" ]; then
    echo "Starting Celery beat..."
    exec celery -A school_platform beat \
        --loglevel=info \
        --scheduler django_celery_beat.schedulers:DatabaseScheduler \
        --logfile=/app/logs/celery-beat.log
elif [ "$1" = "celery-flower" ]; then
    echo "Starting Celery flower..."
    exec celery -A school_platform flower \
        --port=5555
else
    echo "Starting custom command: $@"
    exec "$@"
fi
EOF

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# Switch to app user
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["web"]
