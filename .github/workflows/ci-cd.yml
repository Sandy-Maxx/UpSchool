name: Multi-Tenant School ERP Platform CI/CD

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort safety bandit

    - name: Code formatting check (Black)
      run: |
        cd backend
        black --check --diff .

    - name: Import sorting check (isort)
      run: |
        cd backend
        isort --check-only --diff .

    - name: Linting (flake8)
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security check (bandit)
      run: |
        cd backend
        bandit -r . -x */tests/*,*/migrations/* -f json -o bandit-report.json || true
        bandit -r . -x */tests/*,*/migrations/*

    - name: Dependency security check (safety)
      run: |
        cd backend
        safety check --json || true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend linting (ESLint)
      run: |
        cd frontend
        npm run lint

    - name: Frontend type checking (TypeScript)
      run: |
        cd frontend
        npx tsc --noEmit

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: school_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django pytest-xdist

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/school_platform_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        python manage.py migrate

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/school_platform_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
      run: |
        cd backend
        coverage run --source='.' manage.py test --parallel --keepdb
        coverage report --skip-covered --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests with coverage
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: school_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/school_platform_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
      run: |
        cd backend
        python manage.py migrate
        python manage.py test tests.test_integration

  # Docker Build & Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.production
        push: false
        tags: school-erp-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image  
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.production
        push: false
        tags: school-erp-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'school-erp-backend:test'
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'school-erp-frontend:test'
        format: 'sarif'
        output: 'trivy-frontend.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.dev.yml up -d --build
        sleep 30

    - name: Wait for services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/api/health/; do sleep 5; done'

    - name: Run API load tests
      run: |
        # Install k6
        sudo apt-get update
        sudo apt-get install -y k6
        
        # Run load tests
        k6 run --vus 10 --duration 30s tests/load/api-load-test.js

    - name: Clean up
      run: |
        docker-compose -f docker-compose.dev.yml down -v

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: school-erp-backend
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        cd backend
        docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build and push frontend to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: school-erp-frontend
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        cd frontend
        docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to staging ECS
      run: |
        # Update ECS service with new images
        aws ecs update-service \
          --cluster staging-school-erp \
          --service backend-service \
          --force-new-deployment

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: school-erp-backend
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        cd backend
        docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build and push frontend to ECR  
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: school-erp-frontend
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        cd frontend
        docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to production ECS
      run: |
        # Update ECS service with new images
        aws ecs update-service \
          --cluster production-school-erp \
          --service backend-service \
          --force-new-deployment

        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster production-school-erp \
          --services backend-service

    - name: Run post-deployment tests
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health/ || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "🚀 Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ Production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Cleanup old ECR images
      run: |
        # Keep only the latest 10 images
        aws ecr list-images \
          --repository-name school-erp-backend \
          --filter tagStatus=TAGGED \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output text | \
        tail -n +11 | \
        while read imageTag; do
          if [ ! -z "$imageTag" ]; then
            aws ecr batch-delete-image \
              --repository-name school-erp-backend \
              --image-ids imageTag=$imageTag
          fi
        done
