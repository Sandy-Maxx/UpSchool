name: Frontend Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  comprehensive-testing:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npm run test:type-check
    
    - name: Run system tests
      working-directory: ./frontend
      run: npm run test:system
    
    - name: Run unit tests with coverage
      working-directory: ./frontend
      run: npm run test:unit -- --coverage
    
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Test build artifacts
      working-directory: ./frontend
      run: npm run test:build-artifacts
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.node-version }}
        path: frontend/test-reports/

  e2e-testing:
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Cypress E2E tests
      working-directory: ./frontend
      run: npm run test:e2e:ci
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/test-reports/cypress/screenshots/
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: frontend/test-reports/cypress/videos/

  performance-testing:
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: npm run test:performance
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: frontend/test-reports/lighthouse/

  security-testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      working-directory: ./frontend
      run: |
        npx snyk auth ${{ secrets.SNYK_TOKEN }}
        npx snyk test --severity-threshold=medium
      continue-on-error: true
    
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  stage-specific-testing:
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    
    strategy:
      matrix:
        stage: [1, 2, 3, 4, 5]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Stage ${{ matrix.stage }} tests
      working-directory: ./frontend
      run: npm run test:stage${{ matrix.stage }}
    
    - name: Upload stage test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: stage${{ matrix.stage }}-test-results
        path: frontend/test-reports/stage${{ matrix.stage }}/

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, e2e-testing, performance-testing, security-testing]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Deploy to preview environment
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/dist --functions=frontend/netlify/functions
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Preview deployment is ready! Check it out at the deploy preview URL.'
          })
